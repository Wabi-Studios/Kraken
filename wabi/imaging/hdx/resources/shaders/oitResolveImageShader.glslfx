-- glslfx version 0.1

//
// Copyright 2020 Wabi.  All rights reserved.
//
// Distributed under the terms of the Wabi End-User License Agreement.
// The full license is in the file LICENSE, distributed with this software.
//

-- configuration
{
    "techniques": {
        "default": {
            "fragmentShader": {
                "source": [ "OitResolve.Image" ]
            }
        }
    }
}

-- glsl OitResolve.Image

vec4 imageShader(vec2 uv)
{
#if defined(HD_HAS_hdxOitDataBuffer)
    int screenWidth = int(HdGet_oitScreenSize().x);

    // +1 because index 0 of counter buffer is reserved as atomic counter in
    // WriteOitLayersToBuffer
    int screenIndex = int(gl_FragCoord.x) + int(gl_FragCoord.y) * screenWidth;
    screenIndex += 1;

    int nodeIndex = hdxOitCounterBuffer[screenIndex];
    int numDepths = 0;

    // XXX renderPass.WriteOitLayersToBuffer does not clamp the number of
    //     depth samples we store for a pixel. Here we process no more than
    //     'maxSamples' for a pixel. (If there are greater than 'maxSamples'
    //     samples stored for this pixel some will currently not contribute)
    const int maxSamples = 8;
    vec4 sortedColor[maxSamples];
    float sortedDepth[maxSamples];

    while (nodeIndex != -1 &&
           numDepths < maxSamples &&
           nodeIndex < hdxOitDataBuffer.length())
    {
        float currentDepth = hdxOitDepthBuffer[nodeIndex];
        int insertIndex = numDepths;
        // Recall that depths are in eye space, so inequality is flipped.
        while (insertIndex > 0 && sortedDepth[insertIndex - 1] < currentDepth) {
            sortedDepth[insertIndex] = sortedDepth[insertIndex - 1];
            sortedColor[insertIndex] = sortedColor[insertIndex - 1];
            insertIndex -= 1;
        }
        sortedColor[insertIndex] = hdxOitDataBuffer[nodeIndex];
        sortedDepth[insertIndex] = hdxOitDepthBuffer[nodeIndex];
        numDepths += 1;
        nodeIndex = hdxOitIndexBuffer[nodeIndex];
    }

    // Assume color in sortedColor is pre-multiplied by alpha
    int depth = 0;
    vec4 colorAccum = vec4(0);
    while (depth < numDepths) {
        colorAccum += sortedColor[depth] * (1 - colorAccum.a);

        if (colorAccum.a >= 1.0) break;

        depth += 1;
    }

    colorAccum = clamp(colorAccum, vec4(0), vec4(1));
    return colorAccum;
#else
    return vec4(0);
#endif
}
