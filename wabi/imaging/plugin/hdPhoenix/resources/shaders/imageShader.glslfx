-- glslfx version 0.1

//
// Copyright 2020 Wabi.  All rights reserved.
//
// Distributed under the terms of the Wabi End-User License Agreement.
// The full license is in the file LICENSE, distributed with this software.
//

--- This is what an import might look like.
--- #import $TOOLS/hdPh/shaders/imageShader.glslfx

-- configuration
{
    "techniques": {
        "default": {
            "vertexShader" : {
                "source": [ "ImageShader.Vertex" ]
            },
            "fragmentShader" : {
                "source": [ "ImageShader.Fragment" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl ImageShader.Vertex

out VertexData
{
    vec2 uv;
} outData;

void main(void)
{
    // Position the vertices to create a large-than-screen triangle.
    // Adjust the UVs of the triangle to have 0-1 fit the screen exactly.
    // 'st' is the geometric UV where the [bottom,left] returns [0, 0].
    // Unlike gl_fragCoord where the [bottom,left] defaults to [0.5, 0.5].
    //
    //    gl_VertexID=0 -> (-1,-1)
    //    gl_VertexID=1 -> ( 3,-1)
    //    gl_VertexID=2 -> (-1, 3)
    //
    //    glDrawArrays( GL_TRIANGLES, 0, 3 );
    //
    //    ID=2
    //    x,y=-1,3
    //    u,v=0,2
    //    |\
    //    |  \
    //    |    \
    //    |      \
    //    |--------\
    //    |        | \
    //    | screen |   \
    //    |        |     \
    //     ----------------
    //    ID=0             ID=1
    //    x,y=-1,-1        x,y=3,-1
    //    u,v=0,0          u,v=2,0
    //
    //
    float x = -1.0 + float(((gl_VertexID%3) & 1) << 2);
    float y = -1.0 + float(((gl_VertexID%3) & 2) << 1);
    outData.uv.x = (x+1.0) * 0.5;
    outData.uv.y = (y+1.0) * 0.5;

    gl_Position = vec4(x, y, 0, 1);
}

--- --------------------------------------------------------------------------
-- glsl ImageShader.Fragment

in VertexData
{
    vec2 uv;
} inData;

layout (location = 0) out vec4 colorOut;

void main(void)
{
    colorOut = imageShader(inData.uv);
}
