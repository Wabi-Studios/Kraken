/*
 * Copyright 2021 Pixar. All Rights Reserved.
 *
 * Portions of this file are derived from original work by Pixar
 * distributed with Universal Scene Description, a project of the
 * Academy Software Foundation (ASWF). https://www.aswf.io/
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *    names, trademarks, service marks, or product names of the Licensor
 *    and its affiliates, except as required to comply with Section 4(c)
 *    of the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the Apache License for the
 * specific language governing permissions and limitations under the
 * Apache License.
 *
 * Modifications copyright (C) 2020-2021 Wabi.
 */

#ifndef WABI_USD_GDR_GEOM_NODE_H
#define WABI_USD_GDR_GEOM_NODE_H

/**
 * @file gdr/geomNode.h */

#include "wabi/base/tf/staticTokens.h"
#include "wabi/usd/gdr/api.h"
#include "wabi/usd/gdr/declare.h"
#include "wabi/usd/ndr/node.h"
#include "wabi/wabi.h"

WABI_NAMESPACE_BEGIN

/**
 * NOTE: Metadata keys that are generated by parsers
 * should start with "__GDR__" to reduce the risk of
 * collision with metadata actually in the geom. */
#define GDR_NODE_METADATA_TOKENS \
  ((Category, "category"))((Role, "role"))((Departments, "departments"))((Help, "help"))(( \
      Label, "label"))((Pages, "pages"))((Primvars, "primvars"))(( \
      ImplementationName, "__GDR__implementationName"))((Target, "__GDR__target"))

/**
 * NOTE: The concept of context is defined on NdrNode and can be queried
 * with the GetContext() method. Gdr categorizes geoms by the context in
 * which they are used inside of a modeler. For instance during 'points'
 * evaluation to feed into a 'edit' or 'particle' geom. */
#define GDR_NODE_CONTEXT_TOKENS \
  ((Polygon, "polygon"))((Mesh, "mesh"))((Nurbs, "nurbs"))((Bezier, "bezier"))(( \
      Points, "points"))((Edges, "edges"))((Primitives, "primitives"))

#define GDR_NODE_ROLE_TOKENS \
  ((Import, "import"))((Export, "export"))((Pack, "pack"))((Edit, "edit"))(( \
      Manipulate, "manipulate"))((Sculpt, "sculpt"))((Paint, "paint"))((Terrain, "terrain"))(( \
      Crowd, "crowd"))((Fur, "fur"))((Particle, "particle"))((Fluid, "fluid"))(( \
      Physics, "physics"))((Pyro, "pyro"))((Utility, "utility"))((Mask, "mask"))((Math, "math"))

TF_DECLARE_PUBLIC_TOKENS(GdrNodeMetadata, GDR_API, GDR_NODE_METADATA_TOKENS);
TF_DECLARE_PUBLIC_TOKENS(GdrNodeContext, GDR_API, GDR_NODE_CONTEXT_TOKENS);
TF_DECLARE_PUBLIC_TOKENS(GdrNodeRole, GDR_API, GDR_NODE_ROLE_TOKENS);

/**
 * @class GdrGeomNode
 *
 * A specialized version of `NdrNode` which holds shading information. */
class GdrGeomNode : public NdrNode {
 public:
  /** Constructor. */
  GDR_API
  GdrGeomNode(const NdrIdentifier &identifier,
              const NdrVersion &version,
              const std::string &name,
              const TfToken &family,
              const TfToken &context,
              const TfToken &sourceType,
              const std::string &definitionURI,
              const std::string &implementationURI,
              NdrPropertyUniquePtrVec &&properties,
              const NdrTokenMap &metadata   = NdrTokenMap(),
              const std::string &sourceCode = std::string());

  /**
   * @name Inputs and Outputs
   * An input or output is also generically referred to as a "property".
   * @{
   *
   * Get a geom input property by name. `nullptr` is returned if an input
   * with the given name does not exist. */
  GDR_API
  GdrGeomPropertyConstPtr GetGeomInput(const TfToken &inputName) const;

  /**
   * Get a geom output property by name. `nullptr` is returned if an output
   * with the given name does not exist. */
  GDR_API
  GdrGeomPropertyConstPtr GetGeomOutput(const TfToken &outputName) const;

  /**
   * Returns the list of all inputs that are tagged as asset identifier
   * inputs. */
  GDR_API
  NdrTokenVec GetAssetIdentifierInputNames() const;

  /**
   * Returns the first geom input that is tagged as the default input.
   * A default input and its value can be used to acquire a fallback value
   * for a node when the node is considered 'disabled' or otherwise
   * incapable of producing an output value. */
  GDR_API
  GdrGeomPropertyConstPtr GetDefaultInput() const;

  /**
   * @} */

  /**
   * @name Metadata
   * The metadata returned here is a direct result of what the parser plugin
   * is able to determine about the node. See the documentation for a
   * specific parser plugin to get help on what the parser is looking for to
   * populate these values.
   * @{
   *
   * The label assigned to this node, if any. Distinct from the name
   * returned from `GetName()`. In the context of a UI, the label value
   * might be used as the display name for the node instead of the name. */
  GDR_API
  const TfToken &GetLabel() const
  {
    return _label;
  }

  /**
   * The category assigned to this node, if any. Distinct from the family
   * returned from `GetFamily()`. */
  GDR_API
  const TfToken &GetCategory() const
  {
    return _category;
  }

  /**
   * Returns the role of this node. This is used to annotate the role that
   * the geom node plays inside a geom network. We can tag certain geoms to
   * indicate their role within a geometric network. We currently tag primvar
   * reading nodes, geom editing nodes, geom imports and exports through various
   * formats such as .obj or .alembic, geom attribute grouping, and other nodes
   * that access fields as well as preform particle/pyro effects, terraforming
   * such as erosion, painting, sculpting, as well as general purpose utility
   * nodes (like booleans or merging or mirroring). This is done to identify
   * the various resources used by a geom network. */
  GDR_API
  std::string GetRole() const;

  /**
   * The help message assigned to this node, if any. */
  GDR_API
  std::string GetHelp() const;

  /**
   * The departments this node is associated with, if any. */
  GDR_API
  const NdrTokenVec &GetDepartments() const
  {
    return _departments;
  }

  /**
   * Gets the pages on which the node's properties reside (an aggregate of
   * the unique `GdrGeomProperty::GetPage()` values for all of the node's
   * properties). Nodes themselves do not reside on pages. In an example
   * scenario, properties might be divided into two pages, 'Simple' and
   * 'Advanced'. */
  GDR_API
  const NdrTokenVec &GetPages() const
  {
    return _pages;
  };

  /**
   * The list of primvars this node knows it requires / uses.
   * For example, a geom node may require the 'normals' primvar to function
   * correctly. Additional, user specified primvars may have been authored on
   * the node. These can be queried via `GetAdditionalPrimvarProperties()`.
   * Together, `GetPrimvars()` and `GetAdditionalPrimvarProperties()`,
   * provide the complete list of primvar requirements for the node. */
  GDR_API
  const NdrTokenVec &GetPrimvars() const
  {
    return _primvars;
  }

  /**
   * The list of string input properties whose values provide the names of
   * additional primvars consumed by this node. For example, this may return
   * a token named `varname`. This indicates that the client should query the
   * value of a (presumed to be string-valued) input attribute named varname
   * from its scene description to determine the name of a primvar the node
   * will consume. See `GetPrimvars()` for additional information. */
  GDR_API
  const NdrTokenVec &GetAdditionalPrimvarProperties() const
  {
    return _primvarNamingProperties;
  }

  /**
   * Returns the implementation name of this node.  The name of the node
   * is how to refer to the node in geom networks.  The label is how to
   * present this node to users.  The implementation name is the name of
   * the function (or something) this node represents in the implementation.
   * Any client using the implementation @b must call this method to get the
   * correct name;  using @c getName() is not correct. */
  GDR_API
  std::string GetImplementationName() const;

  /**
   * @} */

  /**
   * @name Aggregate Information
   * @{
   *
   * Gets the names of the properties on a certain page (one that was
   * returned by `GetPages()`). To get properties that are not assigned to a
   * page, an empty string can be used for \p pageName. */
  GDR_API
  NdrTokenVec GetPropertyNamesForPage(const std::string &pageName) const;

  /**
   * Gets all vstructs that are present in the geom. */
  GDR_API
  NdrTokenVec GetAllVstructNames() const;

  /**
   * @} */

  /**
   * @cond
   * Hide from the API.
   *
   * Performs a post-process on properties to determine information that can
   * only be determined after parsing or in aggregate. Clients SHOULD NOT
   * need to call this. */
  void _PostProcessProperties();

  /**
   * @endcond */

 protected:
  /**
   * Processed primvar metadata. `_primvars` contains the names of primvars
   * consumed by this node, whereas `_primvarNamingProperties` contains the
   * names of string input properties whose values provide the names of
   * additional primvars consumed by this node. */
  NdrTokenVec _primvars;
  NdrTokenVec _primvarNamingProperties;

  /**
   * Tokenized metadata. */
  TfToken _label;
  TfToken _category;
  NdrTokenVec _departments;
  NdrTokenVec _pages;

  GdrPropertyMap _geomInputs;
  GdrPropertyMap _geomOutputs;

 private:
  /**
   * Initializes `_primvars` and `_primvarNamingProperties`. */
  void _InitializePrimvars();

  /**
   * Determines which pages are present on the node's properties. */
  NdrTokenVec _ComputePages() const;
};

WABI_NAMESPACE_END

#endif /* WABI_USD_GDR_GEOM_NODE_H */
