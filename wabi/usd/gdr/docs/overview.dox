/*!
@page gdr_page_front Gdr : Geom Definition Registry
@if ( WABI_MFB_BUILD )
@publicLib
@mainpage Gdr : Geom Definition Registry
@endif

Gdr is a shading-specialized version of Ndr, and provides the following
specialized classes:
- `GdrRegistry`
- `GdrGeomNode`
- `GdrGeomProperty`

For more details on the registry, nodes, or properties, see the base Ndr
classes:
- `NdrRegistry`
- `NdrNode`
- `NdrProperty`

For a high-level view of the system and how all the parts work together, see
the overview page for Ndr.

@tableofcontents

# Discussion of GdrPropertyTypes {#GdrPropertyTypes}

Gdr defines a limited set of types:
- Int
- String
- Float
- Point
- Normal
- Vector
- Matrix
- Struct
- Group
- VStruct
- Unknown


## Two notions of types (GdrPropertyType and SdfValueTypeName)

The GdrPropertyType is not written out to a USD layer, but with the aid of other
information and metadata gathered from a node's geom definition, the GdrPropertyType
is mapped to an SdfValueTypeName that is written into USD layers. The SdfValueTypeNames
are a much richer and wider set of types, and it is this type that is looked at during
opinion composition.

For most of the basic GdrPropertyTypes, we have direct mappings to
SdfValueTypeNames given the Gdr type and if it is an array.  For some of the
GdrPropertyTypes, we use metadata to aid the translation to a particular
SdfValueTypeName (see below).

Clients writing NdrParserPlugin sub-classes for Gdr need only be concerned with
a property's GdrPropertyType. Gdr will handle the details of assigning the correct
SdfValueTypeName.


## Discussion of the special Gdr property types

Some GdrPropertyTypes are a little special because there is no reasonable
corresponding SdfValueTypeName, so we map them all to SdfValueTypeName->Token,
which is typically reserved for an Unknown type.

The special GdrPropertyTypes that map to 'Token' are:
- Struct -  Struct types
- Vstruct - An abstract struct type that can connect to any other 'vstruct',
            and connections are only made if a matching vstruct member is found.

As described, these special GdrPropertyTypes cannot be represented as a
SdfValueTypeName, which is why we simply map them to 'Token'. A user can
find the original struct type of one of these properties by examining the
metadata on the property, since this original  type information  is  not
preserved in either the GdrPropertyType or SdfValueTypeName.


## Gdr metadata that is used to determine GdrPropertyType

As mentioned previously, metadata can be used to drive the parsing of a
GdrPropertyType.  This metadata does need to be authored by geom writers.
Some of these metadata tags are:
- 'role' - The 'role' metadata can be specified for any GdrPropertyType, and
   the value of 'role' will determine if the property will be transformed to
   a different GdrPropertyType.  This metadata is special in that parser plugin
   writers do NOT need to handle any GdrPropertyType transformations.  Parser
   writers simply need to parse the property as usual and allow GdrGeomProperty
   to apply any needed transformations to the GdrPropertyType.
   The 'role' metadata can only have the following predefined values:
   - 'none' - If 'role' is 'none', then the GdrPropertyType will be transformed
     to be as generic as possible.   For  example, if  a property of  original
     GdrPropertyTypes->Vector has 'role' specified as 'none', then the property
     will actually become GdrPropertyTypes->Float.

## Gdr metadata that is used to determine SdfValueTypeName

Some metadata is used to drive the conversion of an SdfValueTypeName.
Metadata that is used for SdfValueTypeName conversion is NOT authored by geom
writers, and it should instead be injected into an GdrGeomProperty by a parser
plugin writer.
This includes:
- GdrPropertyMetadata->IsAssetIdentifier - This metadata tag is injected by a
  parser if the parser determines that the property is an asset. The presence
  of this metadata tag then guides the type mapping to choose SdfValueTypeNames->Asset


## Some examples illustrating the treatment of property types

~~~~~~~~~~~~~{.usd}
geom TestOBJGeom
(
    vector foo = vector(1.0, 1.0, 1.0),
    token bar = "baz",
    token points = ""
    [[
        string primitiveType = "group points"
    ]]
)
~~~~~~~~~~~~~
In the above example, the properties would be translated as follows:

Property  |GdrPropertyType            |SdfValueTypeName
:-------- |:------------------------- |:----------------
foo       |GdrPropertyTypes->Vector   |SdfValueTypeNames->Vector
bar       |GdrPropertyTypes->String   |SdfValueTypeNames->String
points    |GdrPropertyTypes->Group    |SdfValueTypeNames->Token

*/