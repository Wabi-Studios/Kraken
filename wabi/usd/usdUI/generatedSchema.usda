#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class "NodeGraphNodeAPI" (
    doc = """
    This api helps storing information about nodes in node graphs.
    """
)
{
    uniform color3f ui:nodegraph:node:displayColor (
        doc = """
        This hint defines what tint the node should have in the node graph.
        """
    )
    uniform token ui:nodegraph:node:expansionState (
        allowedTokens = ["open", "closed", "minimized"]
        doc = """
        The current expansionState of the node in the ui.
        'open' = fully expanded
        'closed' = fully collapsed
        'minimized' = should take the least space possible
        """
    )
    uniform asset ui:nodegraph:node:icon (
        doc = """
        This points to an image that should be displayed on the node.  It is
        intended to be useful for summary visual classification of nodes, rather
        than a thumbnail preview of the computed result of the node in some
        computational system.
        """
    )
    uniform float2 ui:nodegraph:node:pos (
        doc = """
        Declared relative position to the parent in a node graph.
        X is the horizontal position.
        Y is the vertical position. Higher numbers correspond to lower positions
        (coordinates are Qt style, not cartesian).

        These positions are not explicitly meant in pixel space, but rather
        assume that the size of a node is approximately 1.0x1.0. Where size-x is
        the node width and size-y height of the node. Depending on
        graph UI implementation, the size of a node may vary in each direction.

        Example: If a node's width is 300 and it is position is at 1000, we
        store for x-position: 1000 * (1.0/300)
        """
    )
    uniform float2 ui:nodegraph:node:size (
        doc = """
        Optional size hint for a node in a node graph.
        X is the width.
        Y is the height.

        This value is optional, because node size is often determined
        based on the number of in- and outputs of a node.
        """
    )
    uniform int ui:nodegraph:node:stackingOrder (
        doc = """
        This optional value is a useful hint when an application cares about
        the visibility of a node and whether each node overlaps another.

        Nodes with lower stacking order values are meant to be drawn below
        higher ones. Negative values are meant as background. Positive values
        are meant as foreground.
        Undefined values should be treated as 0.

        There are no set limits in these values.
        """
    )
}

class "SceneGraphPrimAPI" (
    doc = """
    Utility schema for display properties of a prim
    """
)
{
    uniform token ui:displayGroup (
        doc = """When publishing a nodegraph or a material, it can be useful to
        provide an optional display group, for organizational purposes and
        readability. This is because often the usd shading hierarchy is rather
        flat while we want to display it in organized groups.
        """
    )
    uniform token ui:displayName (
        doc = """When publishing a nodegraph or a material, it can be useful to
        provide an optional display name, for readability.
        """
    )
}

class "ScreenAPI" (
    doc = """
    A screen defines the layout of areas within a window. Typically a single
    screen wil contain a layout of areas within a window - controlling each
    area's individual size, and additional UI components such as statusbars
    or whether an area should go fullscreen, hiding all other areas.
    """
)
{
    uniform asset ui:screen:area:icon (
        doc = """
        This points to an image that should be displayed on the area, or to
        be shown next to the area name within a dropdown. It is intended to
        be useful for summary visual classification of areas.
        """
    )
    uniform token ui:screen:area:layout = "none" (
        allowedTokens = ["none", "top", "bottom", "left", "right", "horizontalSplit", "verticalSplit"]
        doc = """
        This authored attribute only has an effect if the area's purpose is
        region. If it is set to region, it will split the area into a subdivided
        area pertaining to this alignment.
        """
    )
    uniform token ui:screen:area:name (
        doc = """
        The name used to label this area, displayed in headers or to simply
        give a UI label to when selecting from a dropdown list.
        """
    )
    uniform float2 ui:screen:area:pos (
        doc = """
        Position for a area in a screen. X is the window relative vertical
        location of the area. Y is the window relative horizontal location
        of the area.
        """
    )
    uniform token ui:screen:area:purpose = "area" (
        allowedTokens = ["area", "region"]
        doc = """
        Determine whether the area fills all available space, or is split
        by an authored alignment to share it's own space with another area.  
        """
    )
    rel ui:screen:area:region (
        doc = """
        A region for this area, to have subdivided inner areas, for areas
        whose purpose is region.
        """
    )
    uniform bool ui:screen:area:showMenus = 0 (
        doc = """
        Whether or not to show clickable menus in the header.
        """
    )
    uniform float2 ui:screen:area:size (
        doc = """
        Size for a area in a screen. X is the width. Y is the height.
        """
    )
    uniform token ui:screen:area:type = "Empty" (
        allowedTokens = ["Empty", "View3D", "ImageEditor", "NodeGraph", "SequenceEditor", "MovieEditor", "DopeSheetEditor", "TextEditor", "Console", "Info", "TopBar", "StatusBar", "Outliner", "Properties", "FileBrowser", "Spreadsheet", "Preferences"]
        doc = """
        The type classification is used to distinguish this area from other
        areas within the DCC. As well as store various layouts and widgets
        within this type.
        """
    )
    rel ui:screen:area:workspace (
        doc = """
        A relationship between an area and a workspace, marking that this
        area is apart of an workspace.
        """
    )
}

class Workspace "Workspace" (
    doc = """
    A workspace acts like a predefined window layout. The purpose of a
    workspace is to have a layout created around your needs, whether that
    purpose might be modeling, animating, scripting, or any other purpose
    you might find helpful for any specific task.

    It is often useful to have many different kinds of workspaces so you
    can quickly switch between layouts based on your needs and contextual
    task at hand.
    """
)
{
    uniform token ui:screen:area:workspace (
        doc = """
        The workspace name that is displayed in a application's GUI.
        Usually laid out within a quickly accessible tab selection
        grouped with other existing workspaces, to quickly switch 
        around.
        """
    )
}

class Window "Window" (
    doc = """
    Provides a window for the purpose of displaying an application's GUI.
    """
)
{
    uniform asset ui:windowIcon (
        doc = """
        This points to an image that should be displayed on the window's,
        top most region where the title is.
        """
    )
    uniform float2 ui:windowPos (
        doc = """
        Position for a window in a monitor. X is the monitor's relative
        vertical location of the window. Y is the monitor's relative
        horizontal location of the window.
        """
    )
    uniform float2 ui:windowSize (
        doc = """
        Size for a window in a monitor. X is the width. Y is the height.
        """
    )
    uniform token ui:windowTitle (
        doc = """
        The window title that is displayed on the top of the window. This
        window title gives context for what this window is used for.
        """
    )
    uniform token ui:windowType = "attached" (
        allowedTokens = ["attached", "detached", "dialog"]
        doc = """
        The window type will determine whether it is apart of the main
        central window instance, or whether it is a detached, seperate
        window instance, or if it is a temporary dialog box.
        """
    )
}

class Backdrop "Backdrop" (
    doc = """Provides a 'group-box' for the purpose of node graph organization.

    Unlike containers, backdrops do not store the Shader nodes inside of them.
    Backdrops are an organizational tool that allows Shader nodes to be visually
    grouped together in a node-graph UI, but there is no direct relationship
    between a Shader node and a Backdrop.

    The guideline for a node-graph UI is that a Shader node is considered part
    of a Backdrop when the Backdrop is the smallest Backdrop a Shader node's
    bounding-box fits inside.

    Backdrop objects are contained inside a NodeGraph, similar to how Shader
    objects are contained inside a NodeGraph.

    Backdrops have no shading inputs or outputs that influence the rendered
    results of a NodeGraph. Therefore they can be safely ignored during import.

    Like Shaders and NodeGraphs, Backdrops subscribe to the NodeGraphNodeAPI to
    specify position and size.
    """
)
{
    uniform token ui:description (
        doc = """The text label that is displayed on the backdrop in the node
        graph. This help-description explains what the nodes in a backdrop do.
        """
    )
}

