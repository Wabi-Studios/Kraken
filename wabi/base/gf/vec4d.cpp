/*
 * Copyright 2021 Pixar. All Rights Reserved.
 *
 * Portions of this file are derived from original work by Pixar
 * distributed with Universal Scene Description, a project of the
 * Academy Software Foundation (ASWF). https://www.aswf.io/
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *    names, trademarks, service marks, or product names of the Licensor
 *    and its affiliates, except as required to comply with Section 4(c)
 *    of the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the Apache License for the
 * specific language governing permissions and limitations under the
 * Apache License.
 *
 * Modifications copyright (C) 2020-2021 Wabi.
 */
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// vec.template.cpp file to make changes.

#include "wabi/base/gf/vec4d.h"

#include "wabi/base/gf/math.h"
#include "wabi/base/gf/ostreamHelpers.h"
#include "wabi/base/tf/type.h"
#include "wabi/wabi.h"

// Include headers for other vec types to support wrapping conversions and
// operators.
#include "wabi/base/gf/vec4f.h"
#include "wabi/base/gf/vec4h.h"
#include "wabi/base/gf/vec4i.h"

#include <ostream>
#include <vector>

WABI_NAMESPACE_BEGIN

TF_REGISTRY_FUNCTION(TfType)
{
  TfType::Define<GfVec4d>();
}

std::ostream &operator<<(std::ostream &out, GfVec4d const &v)
{
  return out << '(' << Gf_OstreamHelperP(v[0]) << ", " << Gf_OstreamHelperP(v[1]) << ", "
             << Gf_OstreamHelperP(v[2]) << ", " << Gf_OstreamHelperP(v[3]) << ')';
}

bool GfVec4d::operator==(GfVec4f const &other) const
{
  return _data[0] == other[0] && _data[1] == other[1] && _data[2] == other[2] &&
         _data[3] == other[3];
}
bool GfVec4d::operator==(GfVec4h const &other) const
{
  return _data[0] == other[0] && _data[1] == other[1] && _data[2] == other[2] &&
         _data[3] == other[3];
}
bool GfVec4d::operator==(GfVec4i const &other) const
{
  return _data[0] == other[0] && _data[1] == other[1] && _data[2] == other[2] &&
         _data[3] == other[3];
}

WABI_NAMESPACE_END
